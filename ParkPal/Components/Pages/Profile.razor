@page "/Profile"
@using ParkPal.Components.Account
@using ParkPal.Components.Account.Shared
@using ParkPal.Components.Layout
@layout TopNav
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ParkPal.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager



<head>
    <meta charset="UTF-8">
    <title>User Profile Form</title>
    <style>
        body {
            font-family: Verdana, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }

        .profile-form-container {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.3s ease;
        }

            .profile-form-container:hover {
                box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.2);
            }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        .profile-form {
            display: flex;
            flex-direction: column;
        }

        .input-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
        }

        input[type="text"],
        input[type="email"],
        input[type="tel"],
        input[type="date"],
        textarea,
        button[type="submit"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

            input[type="text"]:focus,
            input[type="email"]:focus,
            input[type="tel"]:focus,
            input[type="date"]:focus,
            textarea:focus,
            button[type="submit"]:focus {
                outline: none;
                border-color: #5b72ff;
                box-shadow: 0px 0px 5px 0px rgba(91, 114, 255, 0.5);
            }

        button[type="submit"] {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #5b72ff;
            color: #fff;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

            button[type="submit"]:hover {
                background-color: #4255cc;
                transform: scale(1.05);
            }

            button[type="submit"]:focus {
                outline: none;
                box-shadow: 0px 0px 5px 0px rgba(91, 114, 255, 0.5);
            }
    </style>
</head>
<body>
    <StatusMessage />
    <h1>Welcome, @firstName!</h1>
    <div class="profile-form-container">
        <h1>Edit Profile Information</h1>
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" class="form-control" />
                <label for="date-of-birth" class="form-label">Date of birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
    @code {
        private ApplicationUser user = default!;
        private string? username;
        private string? phoneNumber;
        private string? address;
        private string? firstName;

        [CascadingParameter]
        private HttpContext HttpContext { get; set; } = default!;

        [SupplyParameterFromForm]
        private InputModel Input { get; set; } = new();

        protected override async Task OnInitializedAsync()
        {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            username = await UserManager.GetUserNameAsync(user);
            phoneNumber = await UserManager.GetPhoneNumberAsync(user);

            firstName = user.Fname;
            Input.PhoneNumber ??= phoneNumber;
            Input.DateOfBirth ??= user.DateOfBirth;

        }

    private async Task OnValidSubmitAsync()
    {
        user.PhoneNumber = Input.PhoneNumber;
        user.DateOfBirth = Input.DateOfBirth;
        var updateResult = await UserManager.UpdateAsync(user);
        if (!updateResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: when trying to update the user.", HttpContext);
                return;
            }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        public DateOnly? DateOfBirth { get; set; }

    }
}
</body>



