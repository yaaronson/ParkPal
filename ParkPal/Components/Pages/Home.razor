@page "/"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ParkPal.Components.Account
@using ParkPal.Components.Account.Pages
@using ParkPal.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <style>
       body {
    font-family: Arial, sans-serif;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f4f4f4;
}

.logo {
    margin-top: 20px;
    text-align: center;
}

.logo img {
    max-width: 200px;
}

.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 400px;
    margin-top: 20px;
}

.container h1 {
    color: #333;
    margin-bottom: 20px;
}

.row {
    display: flex;
    justify-content: center;
    width: 100%;
}

.col-md-4 {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
    padding: 20px;
    width: 100%;
    max-width: 400px;
    margin: 10px;
}

.form-floating {
    margin-bottom: 15px;
}

.form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.form-label {
    margin-left: 5px;
    margin-top: -5px;
    color: #333;
}

.btn-primary {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
    transition: background-color 0.3s ease;
}

.btn-primary:hover {
    background-color: #0056b3;
}

a {
    color: blue;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

.text-danger {
    color: red;
}

    </style>
</head>

<body>
    <div class="logo">
        <img src="/parkpallogo.png" alt="Logo">
    </div>
    <div class="container">

<div class="row">
    <div class="col-md-4">
        <ParkPal.Components.Account.Shared.StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Register</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Fname" class="form-control" autocomplete="first" aria-required="true" placeholder="Ploni" />
                <label for="fname">First Name</label>
                <ValidationMessage For="() => Input.Fname" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Lname" class="form-control" autocomplete="last" aria-required="true" placeholder="Almoni" />
                <label for="lname">Last Name</label>
                <ValidationMessage For="() => Input.Lname" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an account</a>
                    </p>
                </div>
        </EditForm>
        </div>
    </div>
</div>


    @code {
        private IEnumerable<IdentityError>? identityErrors;

        [SupplyParameterFromForm]
        private InputModel Input { get; set; } = new();

        [SupplyParameterFromQuery]
        private string? ReturnUrl { get; set; }

        private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

        public async Task RegisterUser(EditContext editContext)
        {
            var user = CreateUser();

            user.Fname = Input.Fname;
            user.Lname = Input.Lname;

            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(user, Input.Password);

                    if (!result.Succeeded)
                    {
                        identityErrors = result.Errors;
                        return;
                    }

                    Logger.LogInformation("User created a new account with password.");

                    var userId = await UserManager.GetUserIdAsync(user);
                    var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

                    await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                    if (UserManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        RedirectManager.RedirectTo(
                            "Account/RegisterConfirmation",
                            new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
                    }

                    await SignInManager.SignInAsync(user, isPersistent: false);
                    RedirectManager.RedirectTo(ReturnUrl);
                }

                private ApplicationUser CreateUser()
                {
                    try
                    {
                        return Activator.CreateInstance<ApplicationUser>();
                    }
                    catch
                    {
                        throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                            $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
                    }
                }

                private IUserEmailStore<ApplicationUser> GetEmailStore()
                {
                    if (!UserManager.SupportsUserEmail)
                    {
                        throw new NotSupportedException("The default UI requires a user store with email support.");
                    }
                    return (IUserEmailStore<ApplicationUser>)UserStore;
                }

                private sealed class InputModel
                {
                    [Required(ErrorMessage = "First name is required.")]
                    [Display(Name = "First name")]
                    public string Fname { get; set; } = "";

                    [Required(ErrorMessage = "Last name is required.")]
                    [Display(Name = "Last name")]
                    public string Lname { get; set; } = "";

                    [Required]
                    [EmailAddress]
                    [Display(Name = "Email")]
                    public string Email { get; set; } = "";

                    [Required]
                    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
                    [DataType(DataType.Password)]
                    [Display(Name = "Password")]
                    public string Password { get; set; } = "";

                    [DataType(DataType.Password)]
                    [Display(Name = "Confirm password")]
                    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
                    public string ConfirmPassword { get; set; } = "";
                }
            }
</body>